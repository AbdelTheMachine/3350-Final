import cv2
import numpy as np

# Define the color ranges for detecting M&M colors (in HSV format)
color_ranges = {
    'Red': ((0, 120, 70), (10, 255, 255)),
    'Green': ((35, 100, 100), (85, 255, 255)),
    'Blue': ((100, 150, 150), (140, 255, 255)),
    'Yellow': ((20, 100, 100), (35, 255, 255)),
    'Brown': ((10, 100, 100), (20, 255, 255)),
    'Orange': ((5, 100, 100), (15, 255, 255))  # Orange color range added
}

# Initialize the camera
cap = cv2.VideoCapture(0)

# Check if the camera is opened
if not cap.isOpened():
    print("Error: Could not open camera.")
    exit()

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture image.")
        break

    # Convert the frame to HSV color space
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Initialize the count dictionary
    color_counts = {color: 0 for color in color_ranges}

    # Loop through each color range and detect the color
    for color, (lower, upper) in color_ranges.items():
        # Create a mask for the current color
        mask = cv2.inRange(hsv_frame, np.array(lower), np.array(upper))

        # Find circles using Hough Circle Transform
        # Convert to grayscale and apply Gaussian blur for better edge detection
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, (15, 15), 0)

        # Use HoughCircles to detect circles
        circles = cv2.HoughCircles(blurred, cv2.HOUGH_GRADIENT, dp=1.2, minDist=30,
                                   param1=50, param2=30, minRadius=10, maxRadius=50)

        if circles is not None:
            # Convert the coordinates and radius of the circles
            circles = np.round(circles[0, :]).astype("int")

            # Loop through the detected circles
            for (x, y, r) in circles:
                # Check if the circle is inside the color mask
                if np.count_nonzero(mask[y-r:y+r, x-r:x+r]) > 0:
                    color_counts[color] += 1

                    # Draw the circle on the frame
                    cv2.circle(frame, (x, y), r, (0, 255, 0), 4)  # Circle outline
                    cv2.rectangle(frame, (x-10, y-10), (x+10, y+10), (0, 128, 255), -1)  # Text background
                    cv2.putText(frame, color, (x - 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 0), 2)

    # Display the counts on the screen
    y_offset = 30
    for color, count in color_counts.items():
        cv2.putText(frame, f'{color}: {count}', (10, y_offset), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 255, 255), 2)
        y_offset += 30

    # Show the frame with the detected M&Ms and color counts
    cv2.imshow('M&M Color Counter', frame)

    # Break the loop on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
